// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../sparqljs

import { Query, Pattern, Expression, FilterPattern, BgpPattern, GraphPattern, GroupPattern, OperationExpression, Triple, Term, PropertyPath, SparqlGenerator } from 'sparqljs';
import { SelectQuery, Ordering, Variable } from 'sparqljs';
import { DescribeQuery } from 'sparqljs';

export class QueryBuilder {
    constructor(query: Query);
    static fromString(queryString: string, prefixes?: {
        [prefix: string]: string;
    } | undefined, baseIRI?: string | undefined): QueryBuilder;
    where(pattern: Pattern): QueryBuilder;
    bgpTriples(triples: Triple[]): QueryBuilder;
    bgpTriple(triple: Triple): QueryBuilder;
    protected getQuery(): Query;
    protected getGenerator(): SparqlGenerator;
    build(): Query;
    toString(): string;
    static term(value: string): Term;
    static var(varName: string): Term;
    static literal(value: string): Term;
    static typedLiteral(value: string, datatype: string): Term;
    static uri(value: string): Term;
    static triple(subject: Term, predicate: PropertyPath | Term, object: Term): Triple;
    static bgp(triples: Triple[]): BgpPattern;
    static graph(name: string, patterns: Pattern[]): GraphPattern;
    static group(patterns: Pattern[]): GroupPattern;
    static filter(expression: Expression): FilterPattern;
    static operation(operator: string, args: Expression[]): OperationExpression;
    static in(term: Term, list: Term[]): OperationExpression;
    static regex(term: Term, pattern: Term, caseInsensitive?: boolean): OperationExpression;
    static eq(arg1: Expression, arg2: Expression): OperationExpression;
    static str(arg: Expression): OperationExpression;
}

export class SelectBuilder extends QueryBuilder {
    constructor(select: SelectQuery);
    static fromString(queryString: string, prefixes?: {
        [prefix: string]: string;
    } | undefined, baseIRI?: string | undefined): SelectBuilder;
    projectAll(): SelectBuilder;
    projection(variables: Variable[]): SelectBuilder;
    project(term: Term): SelectBuilder;
    isProjected(term: Term): boolean;
    orderBy(ordering: Ordering): SelectBuilder;
    offset(offset: number): SelectBuilder;
    limit(limit: number): SelectBuilder;
    protected getQuery(): SelectQuery;
    build(): SelectQuery;
    static ordering(expr: Expression, desc?: boolean): Ordering;
}

export class DescribeBuilder extends QueryBuilder {
    constructor(describe: DescribeQuery);
    static fromString(queryString: string, prefixes?: {
        [prefix: string]: string;
    } | undefined, baseIRI?: string | undefined): DescribeBuilder;
    static new(): DescribeBuilder;
    projectAll(): DescribeBuilder;
    projection(variables: Variable[]): DescribeBuilder;
    project(term: Term): DescribeBuilder;
    isProjected(term: Term): boolean;
    protected getQuery(): DescribeQuery;
    build(): DescribeQuery;
}

